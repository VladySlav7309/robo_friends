{"version":3,"sources":["serviceWorker.js","components/Scroll.jsx","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Scroll","props","react_default","a","createElement","style","border","borderWidth","paddingTop","children","Card","_ref","name","email","id","className","src","concat","alt","CardList","cardsArray","robots","map","user","components_Card","key","SearchBox","onSearch","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","React","Component","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCRSC,EARA,SAAEC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,OAAQ,kBAAmBC,YAAa,YAAaC,WAAY,SACzEP,EAAMQ,WCSJC,EAZF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GACzB,OACIZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,uDACXb,EAAAC,EAAAC,cAAA,OAAKY,IAAG,wBAAAC,OAA0BH,EAA1B,YAAwCI,IAAI,WACpDhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,SAAIS,MCaLM,EAlBE,SAAAR,GAAgB,IACvBS,EADuBT,EAAbU,OACUC,IAAK,SAAAC,GAC3B,OACIrB,EAAAC,EAAAC,cAACoB,EAAD,CACIC,IAAKF,EAAKT,GACVA,GAAIS,EAAKT,GACTF,KAAMW,EAAKX,KACXC,MAAOU,EAAKV,UAIxB,OACIX,EAAAC,EAAAC,cAAA,OAAKW,UAAU,aACVK,ICDEM,EAbG,SAAAf,GAAkB,IAAfgB,EAAehB,EAAfgB,SACjB,OACIzB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACXb,EAAAC,EAAAC,cAAA,SACIW,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCuCZI,cA1CX,SAAAA,EAAa9B,GAAQ,IAAA+B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAOlC,KAaX0B,SAAW,SAAEY,GACTP,EAAKQ,SAAS,CAAEC,YAAgBF,EAAEG,OAAOC,SAbzCX,EAAKY,MAAQ,CACTvB,OAAc,GACdoB,YAAc,IAJDT,mFAOD,IAAAa,EAAAV,KAChBW,MAAM,8CACDC,KAAM,SAAAC,GAAQ,OAAIA,EAASC,SAC3BF,KAAM,SAAAG,GACHL,EAAKL,SAAS,CAACnB,OAAW6B,uCAM7B,IAAAC,EAC2BhB,KAAKS,MAA7BvB,EADH8B,EACG9B,OAAQoB,EADXU,EACWV,YAEVW,EAAiB/B,EAAOgC,OAAQ,SAAAC,GAClC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAUf,EAAYc,iBAG1D,OAAMlC,EAAOoC,OAKTvD,EAAAC,EAAAC,cAAA,OAAKW,UAAU,MACXb,EAAAC,EAAAC,cAAA,MAAIW,UAAU,cAAd,eAGAb,EAAAC,EAAAC,cAACsD,EAAD,CAAW/B,SAAaQ,KAAKR,WAC7BzB,EAAAC,EAAAC,cAACuD,EAAD,KACIzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUvC,OAAW+B,MAVtBlD,EAAAC,EAAAC,cAAA,+BA1BDyD,IAAMC,iBCQxBC,IAASC,OACL9D,EAAAC,EAAAC,cAAC6D,EAAD,MACFC,SAASC,eAAe,SNkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.94cd66d9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Scroll = ( props ) => {\r\n    return (\r\n        <div style={{border: '1px solid black', borderWidth: '2px 0 0 0', paddingTop: '20px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardsArray = robots.map( user => {\r\n        return (\r\n            <Card\r\n                key={user.id}\r\n                id={user.id}\r\n                name={user.name}\r\n                email={user.email}\r\n                />\r\n        );\r\n    });\r\n    return (\r\n        <div className=\"card-list\">\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ onSearch }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"search robots\"\r\n                onChange={ onSearch }\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React      from 'react';\r\nimport Scroll     from '../components/Scroll';\r\nimport CardList   from '../components/CardList';\r\nimport SearchBox  from '../components/SearchBox';\r\n\r\nclass App extends React.Component {\r\n    constructor( props ) {\r\n        super( props );\r\n        this.state = {\r\n            robots      : [],\r\n            searchField : ''        \r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then( response => response.json())\r\n            .then( users => {\r\n                this.setState({'robots' : users});\r\n            });\r\n    }\r\n    onSearch = ( e ) => {\r\n        this.setState({ 'searchField' : e.target.value });\r\n    }\r\n    render() {\r\n        const { robots, searchField } = this.state;\r\n\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes( searchField.toLowerCase() );\r\n        });\r\n\r\n        if( ! robots.length ) {\r\n            return <h1>Loading...</h1>\r\n        }\r\n\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"robo-title\">\r\n                    RoboFriends\r\n                </h1>\r\n                <SearchBox onSearch = { this.onSearch } />\r\n                <Scroll>\r\n                    <CardList robots = { filteredRobots } />\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n// plugins\nimport 'tachyons';\n\n// Components\nimport App from './containers/App.jsx';\n\n// Css\nimport './index.css';\n\nReactDOM.render(\n    <App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}